@page "/"
@using Microsoft.AspNetCore.SignalR.Client
@using BlazorServerSignalRApp.Data
@inject NavigationManager Navigation
@implements IAsyncDisposable

<PageTitle>Index</PageTitle>

<div class="form-group">
    <label>
        User:
        <input @bind="userInput" />
    </label>
</div>
<div class="form-group">
    <label>
        Message:
        <input @bind="messageInput" size="50" />
    </label>
</div>
<button @onclick="Send" disabled="@(!IsConnected)">Send</button>
<button @onclick="Wait" disabled="@(!IsConnected)">Wait</button>
<button @onclick="WaitPrompt" disabled="@(!IsConnected)">Wait with prompt</button>
<button @onclick="Complex" disabled="@(!IsConnected)">Complex</button>

<hr>

<ul id="messagesList">
    @foreach (var message in messages)
    {
        <li>@message</li>
    }
</ul>

@code {
    private HubConnection? hubConnection;
    private List<string> messages = new List<string>();
    private string? userInput;
    private string? messageInput;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/chathub"))
            .Build();

        hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
        {
            var encodedMsg = $"{user}: {message}";
            messages.Add(encodedMsg);
            InvokeAsync(StateHasChanged);
        });

        hubConnection.On("GetMessage", async () =>
        {
            //Console.WriteLine("prompt:");
            // var message = await Console.In.ReadLineAsync();
            await Task.Delay(TimeSpan.FromMilliseconds(100));
            return "test message";
        });

        hubConnection.On("GetMessageWithPrompt", async (string prompt) =>
        {
            await Task.Delay(TimeSpan.FromMilliseconds(100));
            return $"echo {prompt}";
        });

        hubConnection.On("ComplexPrompt", async (ComplexSampleRequest request) =>
        {
            await Task.Delay(TimeSpan.FromMilliseconds(100));
            return new ComplexSampleResponse(true, request.Items[0]);
        });

        await hubConnection.StartAsync();
    }

    private async Task Send()
	{
	    if (hubConnection is not null)
            {
                await hubConnection.SendAsync("SendMessage", userInput, messageInput);
            }
	}
    
    private async Task Wait()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("WaitMessage");
        }
    }

    private async Task WaitPrompt()
    {
        if (hubConnection is not null)
        {
            var result = await hubConnection.InvokeAsync<string>("WaitMessageWithPrompt", "12345");
            messages.Add($"Whole chain [{result}]");
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task Complex()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("ComplexMessage");
        }
    }


    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}
